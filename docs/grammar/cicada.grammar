(define-grammar <operator>
  ((<operator::var> (let name <identifier>))
   (Exp::Var name))
  ((<operator::ap>
    (let target <operator>)
    (let arg-entries-group (one-or-more "(" <arg-entries> ")")))
   (Exp::ApUnfolded target (flatten arg-entries-group)))
  ((<operator::sequence-begin> (let sequence <sequence>))
   (Exp::Sequence sequence))
  ((<operator::car> "car" "(" (let target <exp>) ")")
   (Exp::Car target))
  ((<operator::cdr> "cdr" "(" (let target <exp>) ")")
   (Exp::Cdr target))
  ((<operator::dot-field>
    (let target <operator>) "." (let name <identifier>))
   (Exp::Dot target name))
  ((<operator::dot-method>
    (let target <operator>) "." (let name <identifier>)
    (let arg-entries-group (one-or-more "(" <arg-entries> ")")))
   (Exp::ApUnfolded (Exp::Dot target name) (flatten arg-entries-group)))
  ((<operator::recursion>
    "recursion" "(" (let target <exp>) ")"
    "{" (let case-entries (zero-or-more <case-entry>)) "}")
   (Exp::Recursion target case-entries))
  ((<operator::induction>
    "induction" "(" (let target <exp>) ")"
    "{" "motive" (let motive <exp>)
    (let case-entries (zero-or-more <case-entry>)) "}")
   (Exp::Induction target motive case-entries)))
